
#ifndef mod_imgfont

#include "../common/sentence.hsp"

#module mod_imgfont

#define global initImgFont(%1=1) initImgFont_ %1
#define global setImgFontAttr(%1=1, %2=1, %3=-1) setImgFontAttr_ %1, %2, %3
#define global drawImgStr(%1, %2, %3, %4=defOffsetX@mod_imgfont, %5=defOffsetY@mod_imgfont) drawImgStr_ %1, %2, %3, %4, %5
#define global drawImgStrR(%1, %2, %3, %4=defOffsetX@mod_imgfont, %5=defOffsetY@mod_imgfont) drawImgStrR_ %1, %2, %3, %4, %5
#define global drawImgStrC(%1, %2, %3, %4=defOffsetX@mod_imgfont, %5=defOffsetY@mod_imgfont) drawImgStrC_ %1, %2, %3, %4, %5
#define global ctype getImgStrWidth(%1, %2=defOffsetX@mod_imgfont) getImgStrWidth_(%1, %2)

#deffunc initImgFont_ int _in

	imgNum = _in ; 最大画像ファイル数
	fimg = 0
	dim winId, imgNum
	sdim asciiMap, 256, imgNum
	dim posx, imgNum, 256
	dim posy, imgNum, 256
	dim shiftx, imgNum, 256
	rateX = 1.0
	rateY = 1.0
	lspace = 1
	dim defOffsetX, 256
	dim defOffsetY, 256
	return

#deffunc loadImgFont str _fn, str _ifn, int _id

/*
	分割サイズx, y
	アスキー文字 文字幅, シフトx, y
		（文字は行頭１列目、２列目は半角スペース）
		（文字幅、シフトはピクセル単位）
		（シフト省略可）
	（以下分割ID順に）...
*/
	loadSentences _fn
	nextSentence ls
	split ls, ",", ps
	imgDivX = int(ps(0))
	imgDivY = int(ps(1))
	celload _ifn
	winId(_id) = stat
	celdiv stat, imgDivX, imgDivY
	repeat
		nextSentence ls, 2
		if (stat) : break
		poke asciiMap(_id), peek(ls), cnt
		getstr ls, ls, 2
		sdim ps, 64, 3
		split ls, ",", ps
		shiftx(_id, cnt) = int(ps(0)) + int(ps(1))
		posx(_id, cnt) = int(ps(1))
		posy(_id, cnt) = int(ps(2))
	loop
	return

#deffunc selImgFont int _id

	fimg = _id
	return

#deffunc setImgFontAttr_ double _rx, double _ry, int _ls

	rateX = _rx
	rateY = _ry
	if (_ls < 0) {
		lspace = 0 + rateX
	} else {
		lspace = _ls
	}
	return

#deffunc drawImgStr_ str _m, int _x, int _y, array _ofsx, array _ofsy

	m = _m
	x = _x
	repeat strlen(m)
		idx = peek(asciiMap, peek(m, cnt))
		x -= rateX * (-_ofsx(cnt) + posx(fimg, idx))
		pos x, _y + rateY * (-_ofsy(cnt) + posy(fimg, idx))
		celput winId(fimg), idx, rateX, rateY
		x += rateX * shiftx(fimg, idx) + lspace
	loop
	return

#deffunc drawImgStrR_ str _m, int _x, int _y, array _ofsx, array _ofsy

	drawImgStr _m, _x - getImgStrWidth(_m, _ofsx), _y, _ofsx, _ofsy
	return

#deffunc drawImgStrC_ str _m, int _x, int _y, array _ofsx, array _ofsy

	drawImgStr _m, _x - getImgStrWidth(_m, _ofsx) / 2, _y, _ofsx, _ofsy
	return

#defcfunc getImgStrWidth_ str _m, array _ofsx

	m = _m
	w = 0
	repeat strlen(m)
		idx = peek(asciiMap, peek(m, cnt))
		w += rateX * (-_ofsx(cnt) + shiftx(fimg, idx) - posx(fimg, idx)) + lspace
	loop
	return w - lspace

#global

#endif
