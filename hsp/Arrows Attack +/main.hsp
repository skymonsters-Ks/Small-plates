;$a>aaa.ax

; HSP 3.5

;$data wx:640,wy:480,mem:16
#define global TITLE_NAME      "Arrows Attack +"
#define global DATA_SE_ARROW1  "se/za.wav"
#define global DATA_SE_ARROW2  "se/cti.wav"
#define global DATA_SE_ARROW3  "se/pyun.wav"
#define global DATA_SE_ARROW4  "se/gu.wav"
#define global DATA_SE_CLEAR   "se/pylll.wav"
#define global DATA_SE_MISS    "se/pililili.wav"
#define global DATA_FONT       "font/sfaaa"
;$end

#include "hsp3dish.as"
#include "../common/platform.hsp"
#include "../common/segfont.hsp"

#const global TIME_LIMIT 30000
#const global TIME_READY 1000
#const global REMAIN_NUM 30

#enum SC_MAIN = 0
#enum SC_TITLE
#enum SC_READY
#enum SC_MISS
#enum SC_TIMEUP
#enum SC_CLEAR

#enum global SE_ARROW = 0
#enum global SE_CLEAR = SE_ARROW + 4
#enum global SE_MISS
#enum global SE_NUM

#const global PI_D2  M_PI / 2
#const global PI_D4  M_PI / 4


#module

#deffunc initSe

	vt = 1000, 990, 920, 800, 0
	return

#deffunc loadSe str _s, int _id

	f = cnvName(_s)
	exist f
	if (strsize >= 0) {
		mmload f, _id
	}
	return

#deffunc setVolAll int _v

	repeat SE_NUM
		mmvol cnt, -vt(_v)
	loop
	return

#deffunc stopSeAll

	repeat SE_NUM
		mmstop cnt
	loop
	return

#global


*start

	title TITLE_NAME

	initSe
	loadSe DATA_SE_ARROW1, SE_ARROW + 0
	loadSe DATA_SE_ARROW2, SE_ARROW + 1
	loadSe DATA_SE_ARROW3, SE_ARROW + 2
	loadSe DATA_SE_ARROW4, SE_ARROW + 3
	loadSe DATA_SE_CLEAR, SE_CLEAR
	loadSe DATA_SE_MISS, SE_MISS
	vol = 2
	setVolAll vol

	loadSegFont cnvName(DATA_FONT)
	initArrow
	getreq time, SYSREQ_TIMER
	changeScene SC_TITLE
	
	ddim knt_def, 20
	
	; "ARROWS ATTACK"
	ddim knt_title, 13
	knt_title(8) = 0.16
	knt_title(10) = 0.16
	
	; "SPACE KEY TO START"
	ddim knt_start, 18
	knt_start(11) = 0.2
	knt_start(15) = 0.16
	
	; "READY"
	ddim knt_ready, 5
	knt_ready(4) = 0.18

*mainLoop

	getreq time, SYSREQ_TIMER
	delta = time - preTime
	preTime = time
	sceneTime = time - startTime

	stick key
	if (key & 128) {
		changeScene SC_TITLE
		stopSeAll
	}

	switch scene
	case SC_MAIN
		frameCnt++
		if (key & 15) {
			if (key == (1 << nowNo)) {
				poke arrowLog, REMAIN_NUM - remain, nowNo
				remain--
				if (remain == 0) {
					mmplay SE_CLEAR
					changeScene SC_CLEAR
				} else {
					setHitMarker nowNo
					nowNo = rnd(40) / 10
					mmplay SE_ARROW + nowNo
					pTime = time
				}
			} else {
				changeScene SC_MISS
				mmplay SE_MISS
				repeat 4
					if (key >> cnt & 1) {
						if (1 << nowNo >> cnt & 1) : else {
							setHitMarker cnt
							break
						}
					}
				loop
			}
			hitTime = time
		}
		if (sceneTime >= TIME_LIMIT) {
			changeScene SC_TIMEUP
			mmplay SE_MISS
		}
		swbreak
	case SC_READY
		if (sceneTime >= readyTime) {
			changeScene SC_MAIN
			randomize
			nowNo = rnd(4)
			mmplay SE_ARROW + nowNo
			pTime = time
		}
		swbreak
	case SC_TITLE
		if (key & 1) : if (vol > 0) : vol-- : setVolAll vol : mmplay SE_ARROW + 1
		if (key & 4) : if (vol < 4) : vol++ : setVolAll vol : mmplay SE_ARROW + 1
	default
		if (key & 16) {
			changeScene SC_READY
			remain = REMAIN_NUM
			frameCnt = 0
			startCnt++
			readyTime = TIME_READY + limit(500 - startCnt * 100, 0, 500) + rnd(100)
			sdim arrowLog, REMAIN_NUM + 2
			setHitMarker -1
			stopSeAll
		}
	swend

	redraw 0

	dc = 240
	switch scene
	case SC_MISS
	case SC_TIMEUP
		color 255, 110, 90
		boxf
		if (sceneTime < 500) {
			color dc, dc, dc
			t = 500 - sceneTime
			repeat t / 100
				y = rnd(480)
				grect 320, y, , 640, rnd(t / 30) / 5 + 1
			loop
		}
		swbreak
	case SC_CLEAR
		color 90, 110, 255
		boxf
		if (sceneTime < 600) {
			color dc, dc, dc
			setease 160, 220, ease_cubic_out
			s = getease(sceneTime, 600)
			grect 320, 240, PI_D4, s, s
			grect 320, 240, , sceneTime + 200, (600 - sceneTime) / 200
			color 90, 110, 255
			setease 60, 220, ease_cubic_out
			s = getease(sceneTime, 600)
			grect 320, 240, PI_D4, s, s
		}
		swbreak
	default
		dc = 80
		color 250, 250, 250
		boxf
	swend
	color dc, dc, dc

	switch scene
	case SC_MAIN
		draw_fps
		draw_time_remain_log sceneTime
		drawHitMarker 0.03 * (time - hitTime)
		draw_arrow_remainMark
		swbreak
	case SC_TITLE
		repeat 4
			r = PI_D2 * cnt
			p = limitf(sin(0.0008 * sceneTime - PI_D2) * 80, -20, 30) + 40
			drawArrow cnt, cos(r) * p + 320, sin(r) * p + 240, 60
		loop
		repeat vol * 2
			grect 320 + (cnt / 2) * ((cnt \ 2) * 2 - 1) * 30, 410, , 14, 4
		loop
		draw_strTopBottom "ARROWS ATTACK", knt_title
		swbreak
	case SC_READY
		draw_time_remain_log 0
		drawReadyMark sceneTime, readyTime
		setSegFontAttr 20, 2, 4
		drawSegStrC "READY", 320, 230, knt_ready
		swbreak
	case SC_CLEAR
		draw_fps
		draw_time_remain_log resultTime
		draw_strTopBottom "CLEAR", knt_def
		swbreak
	case SC_MISS
		draw_fps
		drawHitMarker 0
		draw_time_remain_log resultTime
		draw_arrow_remainMark
		draw_strTopBottom "MISS", knt_def
		swbreak
	case SC_TIMEUP
		draw_fps
		draw_time_remain_log resultTime
		draw_arrow_remainMark
		draw_strTopBottom "TIMES UP", knt_def
		swbreak
	swend

	redraw

	await 1

	goto *mainLoop


#deffunc changeScene int _s

	resultTime = sceneTime
	scene = _s
	sceneTime = 0
	startTime = time
	return


#deffunc draw_time_remain_log int _t

	setSegFontAttr 20, 2, 3
	drawSegStr strf("%5.2f", limitf(_t, 0, TIME_LIMIT) / 1000), 450, 70
	drawSegStr strf("%d", remain), 112, 390
	repeat limit(REMAIN_NUM - remain, 0, 30)
		drawArrow peek(arrowLog, cnt), 118 + cnt * 14, 426, 6
	loop
	return


#deffunc draw_fps

	if (scene == SC_MAIN) {
		t = limit(double(delta) / 16.666 * 20, 0, 120)
	} else {
		t = frameCnt * 1000 / resultTime
		setSegFontAttr 10, 1, 2
		drawSegStr strf("%4d", t), 522, 105
		t = 1200 / t
	}
	boxf 572 - t, 98, 572, 100
	return
	

#deffunc draw_arrow_remainMark

	drawRemainMark remain, 8
	drawArrow nowNo, 320, 240, limitf(160.0 - 0.4 * (time - pTime), 110, 160)
	return


#deffunc draw_strTopBottom str _s, array _kn

	setSegFontAttr 40, 2, 5
	drawSegStrC _s, 320, 8, _kn
	setSegFontAttr 28
	drawSegStrC "SPACE KEY TO START", 320, 444, knt_start
	return



#module

#deffunc vecRot var _ox, var _oy, double _ix, double _iy, double _r

	_ox = _ix * cos(_r) - _iy * sin(_r)
	_oy = _ix * sin(_r) + _iy * cos(_r)
	return

#deffunc drawPoly int _i, array _vx, array _vy, int _x, int _y, double _s

	repeat 4
		x1(cnt) = 0 + (_s * _vx(_i + cnt) + _x)
		y1(cnt) = 0 + (_s * _vy(_i + cnt) + _y)
	loop
	gsquare -1, x1, y1
	return

#global

#module

#deffunc initArrow

	ddim vx, 32
	ddim vy, 32
	vx = -1.0, -1.0, -0.2, -0.2,  -0.2,  1.0,  1.0, -0.2
	vy =  0.0,  0.0,  0.8, -0.8,   0.2,  0.2, -0.2, -0.2
	repeat 24
		vecRot vx(cnt + 8), vy(cnt + 8), vx(cnt), vy(cnt), PI_D2
	loop
	return

#deffunc drawArrow int _i, int _x, int _y, double _s

	drawPoly _i * 8,     vx, vy, _x, _y, _s
	drawPoly _i * 8 + 4, vx, vy, _x, _y, _s
	return

#global

#module

#deffunc setHitMarker int _i

	id = _i
	return

#deffunc drawHitMarker double _t

	if (id < 0) : return
	t = limitf(0.1 * _t, 0, 0.2)
	x = 0.0, 0.8, 1.0 - t, 0.2 - t,   x,  x(1),  x(2),  x(3)
	y = 0.0, 0.8, 0.8, 0.0,  -y, -y(1), -y(2), -y(3)
	r = PI_D2 * id
	repeat 8
		vecRot x(cnt), y(cnt), x(cnt), y(cnt), r
	loop
	px = cos(r + M_PI) * 176 + 320
	py = sin(r + M_PI) * 176 + 240
	drawPoly 0, x, y, px, py, 60
	drawPoly 4, x, y, px, py, 60
	return

#global

#module

#const GAUGE_NUM   REMAIN_NUM
#const PI_DGN      M_PI * 2 / GAUGE_NUM

#deffunc drawRemainMark int _n, int _sz, int _rev

	s = (_rev == 1) * 2 - 1
	r = 158
	repeat _n
		a = PI_DGN * s * cnt - PI_D2
		grect cos(a) * r + 320, sin(a) * r + 240, PI_D4, _sz, _sz
	loop
	return

#deffunc drawReadyMark int _t, int _rt

	drawRemainMark limit(_t * GAUGE_NUM / _rt, 0, GAUGE_NUM), 10, 1
	return

#global
